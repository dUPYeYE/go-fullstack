scalar Time
scalar UUID

enum Role {
  admin
  user
}

directive @authenticated(role: Role!) on FIELD_DEFINITION

type User {
  id: UUID!
  name: String!
  email: String!
  role: String!
  createdAt: Time!
  updatedAt: Time!
}

type RefreshToken {
  token: String!
  userId: UUID!
  createdAt: Time!
  updatedAt: Time!
  expiresAt: Time!
  revokedAt: Time
}

input UserFilter {
  id: UUID
  email: String
}

type Query {
  users: [User!]! @authenticated(role: admin)
  user(filter: UserFilter!): User @authenticated(role: admin)
  me: User! @authenticated(role: user)
}

input CreateUserInput {
  name: String!
  email: String!
  password: String!
  role: String
}

input UpdateUserInput {
  name: String
  email: String
  role: String
}

type Mutation {
  createUser(input: CreateUserInput!): User!
  updateUser(id: UUID!, input: UpdateUserInput!): User! @authenticated(role: user)
  deleteUser(id: UUID!): Boolean! @authenticated(role: user)

  login(email: String!, password: String!): String!
  refreshToken: String!
  logout: Boolean!
}
